name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths:
      - 'VERSION'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 加载版本号
        run: |
          if [ -f DEV-VERSION ]; then
            echo "VERSION=$(cat DEV-VERSION)" >> $GITHUB_ENV
          else
            echo "DEV-VERSION file not found!" && exit 1
          fi
      - name: 输出版本号
        run: | 
          echo "Version: ${{ env.VERSION }}"
      - name: 预先创建Pre-release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.VERSION }}
          artifacts: ./DEV-VERSION
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}
          allowUpdates: true
          prerelease: true
          body: ${{ env.VERSION }}
        env:
          export PATH: $PATH:/usr/local/go/bin

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    env:
      OUTPUT_BINARY: go
      GO_VERSION: 1.23.5

    steps:
      - uses: actions/checkout@v4
      - name: Load VERSION
        run: |
          if [ -f VERSION ]; then
            echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          else
            echo "VERSION file not found!" && exit 1
          fi
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          CGO_ENABLED=0 go build -o  ${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}} ./main.go
      - name: Package
        run: |
          mkdir ${{ env.OUTPUT_BINARY }}d
          cp ${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}} ./${{ env.OUTPUT_BINARY }}d/
          mv ./${{ env.OUTPUT_BINARY }}d/${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}} ./${{ env.OUTPUT_BINARY }}d/${{ env.OUTPUT_BINARY }}
          cp LICENSE ./${{ env.OUTPUT_BINARY }}/
          tar -czf ${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}}.tar.gz -C ${{ env.OUTPUT_BINARY }}d .
          ls

      - name: 上传Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}}
          path: |
            ./${{ env.OUTPUT_BINARY }}*          
      - name: 上传至Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.VERSION }}
          artifacts: ./${{ env.OUTPUT_BINARY }}-${{matrix.goos}}-${{matrix.goarch}}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}
          allowUpdates: true
          body: ${{ env.VERSION }}
        env:
          export PATH: $PATH:/usr/local/go/bin     
  docker:
    runs-on: ubuntu-latest
    needs: build  # 确保这个作业在 build 作业完成后运行
    env:
      IMAGE_NAME: user/image  # 定义镜像名称变量
      DOCKERFILE: docker/dockerfile/release/Dockerfile  # 定义 Dockerfile 路径变量

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load VERSION
        run: |
          if [ -f VERSION ]; then
            echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          else
            echo "VERSION file not found!" && exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建镜像
        uses: docker/build-push-action@v6
        with:
          file: ./${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: | 
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}:latest
